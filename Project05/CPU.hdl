// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Determine the instruction type A or C
    Mux16(a=instruction ,b=ALUout ,sel=instruction[15] ,out=inA);
    
    /**
    * A-register will load the instruction if it is:
    * (1) an A-instruction
    * (2) a C-instruction that stores the value in A (d1=1)
    */

    //Determine load status of A-register:
    Not(in=instruction[15] ,out=negateType);
    Or(a=negateType, b=instruction[5] ,out=loadA);
    ARegister(in=inA ,load=loadA ,out=outA ,out[0..14]=addressM);

    //writeM assertion (depends on ins[15] & d3)
    And(a=instruction[15] ,b=instruction[3] ,out=writeM);

    /**
    * ALU takes two 16-bit registers:
    * (1) D-register, depends on (ins[15] & d2)
    * (2) A-register or data memory, depends on (ins[15] & a)
    */

    //Determine the x-input of the ALU:
    And(a=instruction[15] ,b=instruction[4] ,out=loadD);
    DRegister(in=ALUout ,load=loadD ,out=ALUinX);

    //Determine the y-input of the ALU:
    And(a=instruction[15] ,b=instruction[12] ,out=loadY);
    Mux16(a=outA ,b=inM ,sel=loadY ,out=ALUinY);

    // pass input to ALU
    ALU(x=ALUinX ,y=ALUinY ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=ALUout ,out=outM ,zr=ALUzr ,ng=ALUneg);

    /**
    * whether to jump or not depents (beside instruction type) on the
    * existence of one of the following:
    * (1) j1=1 and ALUneg=1
    * (2) j2=1 and ALUzr=1
    * (3) j3=1 and not (ALUneg=1 or ALUzr=1)
    */

    // calculate the jump condition
    Or(a=ALUzr ,b=ALUneg ,out=notpositive);
    Not(in=notpositive ,out=ALUpos);

    And(a=instruction[2] ,b=ALUneg ,out=j1);
    And(a=instruction[1] ,b=ALUzr ,out=j2);
    And(a=instruction[0] ,b=ALUpos ,out=j3);   

    Or(a=j1 ,b=j2 ,out=j1orj2);
    Or(a=j1orj2 ,b=j3 ,out=jOrs);

    And(a=jOrs ,b=instruction[15] ,out=jump);

    /** 
    * in the programe counter increment is always true because
    * if no reset or jump the PC must be incremented
    */

    // set the programe counter
    PC(in=outA ,load=jump ,inc=true ,reset=reset ,out[0..14]=pc);
}