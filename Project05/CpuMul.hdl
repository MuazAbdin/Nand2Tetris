/**
* This chip is an extension of the book CPU by using the extended ALU.
* More specificly if instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
* the CpuMul behave exactly as the book CPU.
* While if it is C instruction and instruction[13] == 0 the output will be D*A/M 
* (the choice between multiplying D by A or D by M is according to instruction[12]).
* Moreover, if it is c instruction and instruction[14] == 0 it will behave as follows:
*
* instruction:  | 12 | 11 | 10 |
* _____________________________
* shift left D  | 0  | 1  | 1  |
* shift left A  | 0  | 1  | 0  |
* shift left M  | 1  | 1  | 0  |
* shift right D | 0  | 0  | 1  |
* shift right A | 0  | 0  | 0  |
* shift right M | 1  | 0  | 0  |
**/

CHIP CpuMul{

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Determine the instruction type A or C
    Mux16(a=instruction ,b=exALUout ,sel=instruction[15] ,out=inA);
    
    /**
    * A-register will load the instruction if it is:
    * (1) an A-instruction
    * (2) a C-instruction that stores the value in A (d1=1)
    */

    //Determine load status of A-register:
    Not(in=instruction[15] ,out=negateType);
    Or(a=negateType, b=instruction[5] ,out=loadA);
    ARegister(in=inA ,load=loadA ,out=outA ,out[0..14]=addressM);

    //writeM assertion (depends on ins[15] & d3)
    And(a=instruction[15] ,b=instruction[3] ,out=writeM);

    /**
    * exALU takes two 16-bit registers:
    * (1) D-register, depends on (ins[15] & d2)
    * (2) A-register or data memory, depends on (ins[15] & a)
    */

    //Determine the x-input of the exALU:
    And(a=instruction[15] ,b=instruction[4] ,out=loadD);
    DRegister(in=exALUout ,load=loadD ,out=exALUinX);

    //Determine the y-input of the exALU:
    And(a=instruction[15] ,b=instruction[12] ,out=loadY);
    Mux16(a=outA ,b=inM ,sel=loadY ,out=exALUinY);

    //prepare the extended ALU instructoin[7..8]
    Mux(a=true ,b=instruction[14], sel=instruction[15], out=ins8);
    Mux(a=true ,b=instruction[13], sel=instruction[15], out=ins7);

    // pass input to the extended ALU
    ExtendAlu(x=exALUinX ,y=exALUinY ,instruction[8]=ins8 ,instruction[7]=ins7 ,instruction[0..6]=instruction[6..12] ,out=outM ,out=exALUout ,zr=exALUzr ,ng=exALUneg);

    /**
    * whether to jump or not depents (beside instruction type) on the
    * existence of one of the following:
    * (1) j1=1 and exALUneg=1
    * (2) j2=1 and exALUzr=1
    * (3) j3=1 and not (exALUneg=1 or exALUzr=1)
    */

    // calculate the jump condition
    Or(a=exALUzr ,b=exALUneg ,out=notpositive);
    Not(in=notpositive ,out=exALUpos);

    And(a=instruction[2] ,b=exALUneg ,out=j1);
    And(a=instruction[1] ,b=exALUzr ,out=j2);
    And(a=instruction[0] ,b=exALUpos ,out=j3);   

    Or(a=j1 ,b=j2 ,out=j1orj2);
    Or(a=j1orj2 ,b=j3 ,out=jOrs);

    And(a=jOrs ,b=instruction[15] ,out=jump);

    /** 
    * in the programe counter increment is always true because
    * if no reset or jump the PC must be incremented
    */

    // set the programe counter
    PC(in=outA ,load=jump ,inc=true ,reset=reset ,out[0..14]=pc);

}
