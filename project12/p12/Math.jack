// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static int _2qy;
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let i = 0;
        while (i < 15) {
            let twoToThe[i+1] = twoToThe[i] + twoToThe[i];
            let i = i + 1;
        }
        return;
    }

    /** Returns true if the i-th bit of x is 1, false otherwise */
    function boolean bit(int x, int i) {
        // ~((x & twoToThe[i]) = 0);
        return x & twoToThe[i] > 0;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
			let x = -x;
		}
		return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, temp, twoPowSum, j;
        var boolean diffSigns;
        let diffSigns = (x < 0 & y > 0) | (x > 0 & y < 0);
        // remove the signs
        let x = Math.abs(x);
        let y = Math.abs(y);
        /* if the multiplicand smaller than the multiplier,
         * then swap them. */
        if (x < y) {
            let temp = x;
            let x = y;
            let y = temp;
        }
        // loop times of the multiplicand bits
        while ((twoPowSum-1) < (y-1)) {
            if (Math.bit(y, j)) {
                let sum = sum + x;
                let twoPowSum = twoToThe[j] + twoPowSum;
            }
            let x = x + x;
            let j = j + 1;
        }
        // if signs of the operands are different
        if (diffSigns) {
            let sum = -sum;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the division operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        let _2qy = 0;
        return Math.helperDivide(x, y);
    }

    function int helperDivide(int x, int y) {
        var int res;
        var boolean diffSigns;
        if (y=0) {
            do Sys.error("zeroDivisionError");
            return 0;
        }
        let diffSigns = (x < 0 & y > 0) | (x > 0 & y < 0);
        // remove the signs
        let x = Math.abs(x);
        let y = Math.abs(y);
        if (y > x) {
            return 0;
        }
        let res = Math.divide(x, y+y);
        if (x - _2qy < y) {
            let res = res + res;
        } else {
            let _2qy = _2qy + y;
            let res = res + res + 1;
        }
        // if signs of the operands are different
        if (diffSigns) {
            let res = -res;
        }
        return res;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int result;
		var int j;
        var int checked;
        var int squared;
        
        let result = 0;
        let j = 7;
        while(~(j < 0)) {
            let checked = result + twoToThe[j];
            let squared = Math.multiply(checked, checked);
            if(~(squared > x) & (squared > 0)) {
                let result = checked;
            }
            let j = j - 1;
        }
        return result;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
}
